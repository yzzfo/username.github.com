<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>yzzfo | Share for Free - runtime level editor</title>
    <subtitle>游戏开发学习资源分享</subtitle>
    <link rel="self" type="application/atom+xml" href="https://yzzfo.github.io/tags/runtime-level-editor/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://yzzfo.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-27T01:01:02+00:00</updated>
    <id>https://yzzfo.github.io/tags/runtime-level-editor/atom.xml</id>
    <entry xml:lang="zh">
        <title>Runtime Asset Database</title>
        <published>2024-12-27T01:01:02+00:00</published>
        <updated>2024-12-27T01:01:02+00:00</updated>
        
        <author>
          <name>
            
              yzzfo
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yzzfo.github.io/unity/store/Runtime Asset Database/ignore-index-en/"/>
        <id>https://yzzfo.github.io/unity/store/Runtime Asset Database/ignore-index-en/</id>
        
        <content type="html" xml:base="https://yzzfo.github.io/unity/store/Runtime Asset Database/ignore-index-en/">&lt;p&gt;Runtime Asset Database simplifies runtime save&#x2F;load implementation in Unity, replicating Unity Editor&#x27;s prefab concepts for runtime asset management.&lt;br&gt;&lt;p &gt;&lt;strong&gt;Runtime Asset Database&lt;&#x2F;strong&gt; is a library designed to simplify the implementation of a runtime save and load subsystem in your Unity application. This library replicates and extends the familiar concepts of prefabs, prefab variants, and assets found within the Unity Editor, making it easier than ever to manage and manipulate game assets at runtime and implement workflows similar to those of the Unity Editor dynamically during runtime.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;Unity developers often rely on the convenience and flexibility of the Editor&#x27;s asset management system when designing their games. However, when it comes to implementing a save and load system at runtime, this process can become more complex. The Runtime Asset Database bridges this gap by bringing the essential asset management functionalities you&#x27;re accustomed to into the runtime environment.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Features:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;&lt;p &gt;♥ Runtime Asset Management API.&lt;&#x2F;p&gt;&lt;p &gt;♥ Built on Unity Editor Prefab Concepts.&lt;&#x2F;p&gt;&lt;p &gt;♥ Asset and Asset Variant Support.&lt;&#x2F;p&gt;&lt;p &gt;♥ Extensibility with new types and components.&lt;&#x2F;p&gt;&lt;p &gt;♥ Pluggable External Asset Importers.&lt;&#x2F;p&gt;&lt;p &gt;♥ Addressables Support.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Battlehub0x&#x2F;RuntimeAssetDatabase&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Docs&lt;&#x2F;strong&gt; &lt;&#x2F;a&gt;&lt;strong&gt;| &lt;&#x2F;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;battlehub&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Telegram&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;strong&gt; | &lt;&#x2F;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assetstore.unity.com&#x2F;packages&#x2F;tools&#x2F;modeling&#x2F;runtime-editor-64806&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Runtime Editor&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Runtime Asset Database</title>
        <published>2024-12-27T01:01:02+00:00</published>
        <updated>2024-12-27T01:01:02+00:00</updated>
        
        <author>
          <name>
            
              yzzfo
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yzzfo.github.io/unity/store/runtime-asset-database/"/>
        <id>https://yzzfo.github.io/unity/store/runtime-asset-database/</id>
        
        <content type="html" xml:base="https://yzzfo.github.io/unity/store/runtime-asset-database/">&lt;p&gt;运行时资产数据库简化了Unity中的运行时保存&#x2F;加载实现，复制了Unity编辑器的预制件概念以进行运行时资产管理。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;运行时资产数据库&lt;&#x2F;strong&gt;是一个旨在简化Unity应用程序中运行时保存和加载子系统实现的库。该库复制并扩展了Unity编辑器中预制件、预制件变体和资产的熟悉概念，使得在运行时管理和操作游戏资产变得比以往任何时候都更容易，并在运行时动态实现类似于Unity编辑器的工作流程。&lt;&#x2F;p&gt;
&lt;p &gt;Unity开发者在设计游戏时通常依赖于编辑器资产管理系统的便利性和灵活性。然而，当涉及到在运行时实现保存和加载系统时，这一过程可能会变得更加复杂。运行时资产数据库弥补了这一差距，将您习惯的基本资产管理功能带入运行时环境。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;特点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;&lt;p &gt;♥ 运行时资产管理API。&lt;&#x2F;p&gt;&lt;p &gt;♥ 基于Unity编辑器预制件概念。&lt;&#x2F;p&gt;&lt;p &gt;♥ 支持资产和资产变体。&lt;&#x2F;p&gt;&lt;p &gt;♥ 可扩展性，支持新类型和组件。&lt;&#x2F;p&gt;&lt;p &gt;♥ 可插拔的外部资产导入器。&lt;&#x2F;p&gt;&lt;p &gt;♥ 支持可寻址资产。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Battlehub0x&#x2F;RuntimeAssetDatabase&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;文档&lt;&#x2F;strong&gt; &lt;&#x2F;a&gt;&lt;strong&gt;| &lt;&#x2F;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;battlehub&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Telegram&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;strong&gt; | &lt;&#x2F;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;assetstore.unity.com&#x2F;packages&#x2F;tools&#x2F;modeling&#x2F;runtime-editor-64806&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;运行时编辑器&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Grid Placement System</title>
        <published>2024-12-19T01:00:31+00:00</published>
        <updated>2024-12-19T01:00:31+00:00</updated>
        
        <author>
          <name>
            
              yzzfo
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yzzfo.github.io/unity/store/Grid Placement System/ignore-index-en/"/>
        <id>https://yzzfo.github.io/unity/store/Grid Placement System/ignore-index-en/</id>
        
        <content type="html" xml:base="https://yzzfo.github.io/unity/store/Grid Placement System/ignore-index-en/">&lt;p&gt;Grid Placement System allows players to easily place items onto a grid at runtime. Perfect for city builders, tower defense and all sorts of other genres where players need to place items.&lt;br&gt;&lt;p &gt;&lt;strong&gt;Grid Placement System&lt;&#x2F;strong&gt; is designed to be extremely customizable and with ease of use at its core.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;No&lt;&#x2F;strong&gt; &lt;strong&gt;object configuration needed.&lt;&#x2F;strong&gt; Pass an object to the grid and it just works! When the grid manager is passed an object to be placed into the grid it handles all of the calculations to determine how many grid cells it takes up.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Customize all aspects of the grid&lt;&#x2F;strong&gt;. Settings include width and height, amount of cells, visualization of grid cells, visualization of occupied cells, the object&#x27;s alignment within its cell(s), the visual feedback when placing an item and more!&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Don&#x27;t like square grid cells?&lt;&#x2F;strong&gt; You can change the sprite to show any shape you like, a circle, a triangle, a dot?&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Easy to use.&lt;&#x2F;strong&gt; The grid settings provide &lt;strong&gt;one &lt;&#x2F;strong&gt;place to customize everything to do with the grid.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Custom editor tools. &lt;&#x2F;strong&gt;Visualize the modifications you make to the grid settings in real-time without entering play mode.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;&lt;strong&gt;Suitable for a wide range of genres&lt;&#x2F;strong&gt;. Examples include: tower defense, city builders, simulation, and anything where the player is required to place an item onto a grid.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;p &gt;The showcase images use 3D models from a 3rd party low poly asset pack. These models are not included in this package.&lt;&#x2F;p&gt;&lt;&#x2F;br&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Grid Placement System</title>
        <published>2024-12-19T01:00:31+00:00</published>
        <updated>2024-12-19T01:00:31+00:00</updated>
        
        <author>
          <name>
            
              yzzfo
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://yzzfo.github.io/unity/store/grid-placement-system/"/>
        <id>https://yzzfo.github.io/unity/store/grid-placement-system/</id>
        
        <content type="html" xml:base="https://yzzfo.github.io/unity/store/grid-placement-system/">&lt;p&gt;Grid Placement System 允许玩家在运行时轻松地将物品放置到网格上。非常适合城市建设者、塔防游戏以及所有需要玩家放置物品的其他类型游戏。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;Grid Placement System&lt;&#x2F;strong&gt; 旨在极具可定制性，并以易用性为核心。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;无需&lt;&#x2F;strong&gt; &lt;strong&gt;对象配置。&lt;&#x2F;strong&gt; 将一个对象传递给网格，它就能正常工作！当网格管理器接收到一个要放置到网格中的对象时，它会处理所有计算，以确定该对象占用多少个网格单元。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;自定义网格的所有方面&lt;&#x2F;strong&gt;。设置包括宽度和高度、单元数量、网格单元的可视化、已占用单元的可视化、对象在其单元内的对齐方式、放置物品时的视觉反馈等更多内容！&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;不喜欢方形网格单元？&lt;&#x2F;strong&gt; 您可以更改精灵以显示您喜欢的任何形状，比如圆形、三角形或点？&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;易于使用。&lt;&#x2F;strong&gt; 网格设置提供了&lt;strong&gt;一个&lt;&#x2F;strong&gt;地方来定制与网格相关的所有内容。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;自定义编辑器工具。&lt;&#x2F;strong&gt; 在不进入游戏模式的情况下，实时可视化您对网格设置所做的修改。&lt;&#x2F;p&gt;
&lt;p &gt;&lt;strong&gt;适合多种类型的游戏&lt;&#x2F;strong&gt;。示例包括：塔防、城市建设、模拟以及任何需要玩家将物品放置到网格上的游戏。&lt;&#x2F;p&gt;
&lt;p &gt;展示图像使用了来自第三方低多边形资产包的3D模型。这些模型不包含在此包中。&lt;&#x2F;p&gt;</content>
        
    </entry>
</feed>
